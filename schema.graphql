type User @entity(immutable: false) {
  id: ID!
  fileContributions: [DataRegistryProof!] @derivedFrom(field: "user")
  "All files owned by this user"
  files: [File!]! @derivedFrom(field: "owner")
  "All permissions granted by this user"
  permissions: [Permission!]! @derivedFrom(field: "grantor")
  "All server trust relationships for this user"
  serverTrusts: [UserServer!]! @derivedFrom(field: "user")
}

type UserTotals @entity(immutable: false) {
  id: ID!

  fileContributionsCount: BigInt!
}

type Dlp @entity(immutable: false) {
  id: ID!
  creator: Bytes
  owner: Bytes
  address: Bytes
  treasury: Bytes
  createdAt: BigInt
  createdTxHash: Bytes
  createdAtBlock: BigInt
  performanceRating: BigInt
  status: BigInt
  name: String
  iconUrl: String
  website: String
  metadata: String
  token: Bytes
  refiners: [Refiner!]! @derivedFrom(field: "dlp")
  performances: [DlpPerformance!]! @derivedFrom(field: "dlp")
  verificationBlockNumber: BigInt
  totals: Totals
}

type EpochReference @entity(immutable: false) {
  id: ID!
  epoch: Epoch!
}

type Epoch @entity(immutable: false) {
  id: ID!
  startBlock: BigInt!
  endBlock: BigInt!
  reward: BigInt!
  createdAt: BigInt!
  createdTxHash: Bytes!
  createdAtBlock: BigInt!
  logIndex: BigInt!
  isFinalized: Boolean
  dlpIds: [BigInt!]!
  performances: [DlpPerformance!]! @derivedFrom(field: "epoch")
}

type DataRegistryProof @entity(immutable: false) {
  id: ID!
  user: User # Optional for v1
  dlp: Dlp # Optional for v1
  epoch: Epoch!
  fileId: BigInt!
  proofIndex: BigInt!
  createdAt: BigInt!
  createdTxHash: Bytes!
  createdAtBlock: BigInt!
  attestor: Bytes # Optional field depending on data availability
}

type Totals @entity(immutable: false) {
  id: ID!

  totalFileContributions: BigInt!
  uniqueFileContributors: BigInt!

  dataAccessFees: BigDecimal!
}

type DlpList @entity(immutable: false) {
  id: ID!
  dlpIds: [String!]!
}

type Params @entity(immutable: false) {
  id: ID!
  daySize: BigInt!
  epochSize: BigInt!
  epochRewardAmount: BigInt!
}

type DlpReward @entity(immutable: false) {
  id: ID!
  dlpId: BigInt
  epochId: BigInt
  amount: BigInt
}

type Schema @entity(immutable: false) {
  id: ID!
  name: String!
  dialect: String!
  definitionUrl: String!
  refiners: [Refiner!]! @derivedFrom(field: "schema")
  createdAt: BigInt!
  createdAtBlock: BigInt!
  createdTxHash: Bytes!
}

type Refiner @entity(immutable: false) {
  id: ID!
  dlp: Dlp!
  owner: Bytes!
  name: String!
  schema: Schema # v6: Reference to schema
  schemaDefinitionUrl: String! # v4/v5: Direct URL
  refinementInstructionUrl: String!
  payments: [PaymentReceived!]! @derivedFrom(field: "refiner")
}

type PaymentReceived @entity(immutable: false) {
  id: ID!
  token: Bytes!
  amount: BigInt!
  jobId: BigInt!
  refiner: Refiner!
  receivedAt: BigInt!
  receivedAtBlock: BigInt!
  receivedTxHash: Bytes!
}

type DlpPerformance @entity(immutable: false) {
  id: ID!
  dlp: Dlp!
  epoch: Epoch!
  totalScore: BigInt!
  tradingVolume: BigInt!
  uniqueContributors: BigInt!
  dataAccessFees: BigInt!
  createdAt: BigInt!
  createdTxHash: Bytes!
  createdAtBlock: BigInt!
}

type PerformanceDlpEpochUser @entity(immutable: false) {
  id: ID!
}

type File @entity(immutable: false) {
  "The unique ID of the file, equivalent to the on-chain fileId."
  id: ID!
  "The owner of the file."
  owner: User!
  "The URL where the file data is stored (e.g., IPFS)."
  url: String!
  "The schema ID associated with this file, if any."
  schemaId: BigInt!
  "The block number when the file was added."
  addedAtBlock: BigInt!
  "The timestamp when the file was added."
  addedAtTimestamp: BigInt!
  "The transaction hash of the file addition."
  transactionHash: Bytes!
}

type Grantee @entity(immutable: false) {
  "The unique ID of the grantee, equivalent to the on-chain granteeId."
  id: ID!
  "The owner who registered this grantee."
  owner: User!
  "The address of the grantee."
  address: Bytes!
  "The public key of the grantee."
  publicKey: String!
  "Permissions associated with this grantee."
  permissions: [Permission!]! @derivedFrom(field: "grantee")
  "The block number when the grantee was registered."
  registeredAtBlock: BigInt!
  "The timestamp when the grantee was registered."
  registeredAtTimestamp: BigInt!
  "The transaction hash of the grantee registration."
  transactionHash: Bytes!
}

type Permission @entity(immutable: false) {
  "The unique ID of the permission, equivalent to the on-chain permissionId."
  id: ID!
  "The user who granted the permission."
  grantor: User!
  "The grantee who received the permission."
  grantee: Grantee!
  "The content identifier (e.g., IPFS URL) for the grant details."
  grant: String!
  "The nonce used for this permission grant."
  nonce: BigInt!
  "The signature provided by the user."
  signature: Bytes!
  "The block number when the permission starts."
  startBlock: BigInt!
  "The block number when the permission ends (null if no end)."
  endBlock: BigInt
  "File permissions for this permission."
  filePermissions: [PermissionFile!]! @derivedFrom(field: "permission")
  "The block number when the permission was granted."
  addedAtBlock: BigInt!
  "The timestamp when the permission was granted."
  addedAtTimestamp: BigInt!
  "The transaction hash of the permission grant."
  transactionHash: Bytes!
}

type PermissionFile @entity(immutable: false) {
  "Composite ID: permissionId-fileId"
  id: ID!
  "The permission."
  permission: Permission!
  "The file."
  file: File!
}

type Server @entity(immutable: false) {
  "The unique ID of the server, using serverId."
  id: ID!
  "The owner who registered this server."
  owner: User!
  "The server's address."
  serverAddress: Bytes!
  "The public key of the server."
  publicKey: Bytes!
  "The URL of the server."
  url: String!
  "User trust relationships for this server."
  userTrusts: [UserServer!]! @derivedFrom(field: "server")
  "The block number when the server was registered."
  registeredAtBlock: BigInt!
  "The timestamp when the server was registered."
  registeredAtTimestamp: BigInt!
  "The transaction hash of the server registration."
  transactionHash: Bytes!
}

type UserServer @entity(immutable: false) {
  "Composite ID: userId-serverId"
  id: ID!
  "The user who trusts the server."
  user: User!
  "The server that is trusted."
  server: Server!
  "Timestamp of when the trust was established."
  trustedAt: BigInt!
  "Block number when the trust was established."
  trustedAtBlock: BigInt!
  "Block number when the trust was revoked (null if still trusted)."
  untrustedAtBlock: BigInt
  "The transaction hash of the trust establishment."
  transactionHash: Bytes!
}

type Factory @entity {
  # factory address
  id: ID!
  # amount of pools created
  poolCount: BigInt!
  # amoutn of transactions all time
  txCount: BigInt!
  # total volume all time in derived USD
  totalVolumeUSD: BigDecimal!
  # total volume all time in derived ETH
  totalVolumeETH: BigDecimal!
  # total swap fees all time in USD
  totalFeesUSD: BigDecimal!
  # total swap fees all time in USD
  totalFeesETH: BigDecimal!
  # all volume even through less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # TVL derived in USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in ETH
  totalValueLockedETH: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # TVL derived in ETH untracked
  totalValueLockedETHUntracked: BigDecimal!

  # current owner of the factory
  owner: ID!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  # price of ETH in usd
  ethPriceUSD: BigDecimal!
}

type Token @entity {
  # token address
  id: Bytes!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # token total supply
  totalSupply: BigInt!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # transactions across all pools that include this token
  txCount: BigInt!
  # number of pools containing this token
  poolCount: BigInt!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # Note: for chains where ETH is not the native token, this will be the derived
  # price of that chain's native token, effectively, this should be renamed
  # derivedNative
  derivedETH: BigDecimal!
  # pools token is in that are white listed for USD pricing
  whitelistPools: [Pool!]!
  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type Pool @entity {
  # pool address
  id: Bytes!
  # creation
  createdAtTimestamp: BigInt!
  # block pool was created at
  createdAtBlockNumber: BigInt!
  # token0
  token0: Token!
  # token1
  token1: Token!
  # fee amount
  feeTier: BigInt!
  # in range liquidity
  liquidity: BigInt!
  # current price tracker
  sqrtPrice: BigInt!
  # token0 per token1
  token0Price: BigDecimal!
  # token1 per token0
  token1Price: BigDecimal!
  # current tick
  tick: BigInt
  # current observation index
  observationIndex: BigInt!
  # all time token0 swapped
  volumeToken0: BigDecimal!
  # all time token1 swapped
  volumeToken1: BigDecimal!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # all time USD swapped, unfiltered for unreliable USD pools
  untrackedVolumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # all time fees collected token0
  collectedFeesToken0: BigDecimal!
  # all time fees collected token1
  collectedFeesToken1: BigDecimal!
  # all time fees collected derived USD
  collectedFeesUSD: BigDecimal!
  # total token 0 across all ticks
  totalValueLockedToken0: BigDecimal!
  # total token 1 across all ticks
  totalValueLockedToken1: BigDecimal!
  # tvl derived ETH
  totalValueLockedETH: BigDecimal!
  # tvl USD
  totalValueLockedUSD: BigDecimal!
  # TVL derived in USD untracked
  totalValueLockedUSDUntracked: BigDecimal!
  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # hourly snapshots of pool data
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  # daily snapshots of pool data
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
  # derived fields
  mints: [Mint!]! @derivedFrom(field: "pool")
  burns: [Burn!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
  collects: [Collect!]! @derivedFrom(field: "pool")
  ticks: [Tick!]! @derivedFrom(field: "pool")
}

type Tick @entity {
  # format: <pool address>#<tick index>
  id: ID!
  # pool address
  poolAddress: Bytes!
  # tick index
  tickIdx: BigInt!
  # pointer to pool
  pool: Pool!
  # total liquidity pool has as tick lower or upper
  liquidityGross: BigInt!
  # how much liquidity changes when tick crossed
  liquidityNet: BigInt!
  # calculated price of token0 of tick within this pool - constant
  price0: BigDecimal!
  # calculated price of token1 of tick within this pool - constant
  price1: BigDecimal!
  # created time
  createdAtTimestamp: BigInt!
  # created block
  createdAtBlockNumber: BigInt!
}

type Transaction @entity {
  # txn hash
  id: ID!
  # block txn was included in
  blockNumber: BigInt!
  # timestamp txn was confirmed
  timestamp: BigInt!
  # gas used during txn execution
  gasUsed: BigInt!
  gasPrice: BigInt!
  # derived values
  mints: [Mint]! @derivedFrom(field: "transaction")
  burns: [Burn]! @derivedFrom(field: "transaction")
  swaps: [Swap]! @derivedFrom(field: "transaction")
  flashed: [Flash]! @derivedFrom(field: "transaction")
  collects: [Collect]! @derivedFrom(field: "transaction")
}

type Mint @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # which txn the mint was included in
  transaction: Transaction!
  # time of txn
  timestamp: BigInt!
  # pool position is within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # owner of position where liquidity minted to
  owner: Bytes!
  # the address that minted the liquidity
  sender: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # amount of liquidity minted
  amount: BigInt!
  # amount of token 0 minted
  amount0: BigDecimal!
  # amount of token 1 minted
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
  # lower tick of the position
  tickLower: BigInt!
  # upper tick of the position
  tickUpper: BigInt!
  # order within the txn
  logIndex: BigInt
}

type Burn @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!
  # txn burn was included in
  transaction: Transaction!
  # pool position is within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # need this to pull recent txns for specific token or pool
  timestamp: BigInt!
  # owner of position where liquidity was burned
  owner: Bytes
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # amouny of liquidity burned
  amount: BigInt!
  # amount of token 0 burned
  amount0: BigDecimal!
  # amount of token 1 burned
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
  # lower tick of position
  tickLower: BigInt!
  # upper tick of position
  tickUpper: BigInt!
  # position within the transactions
  logIndex: BigInt
}

type Swap @entity {
  # transaction hash + "#" + index in swaps Transaction array
  id: ID!
  # pointer to transaction
  transaction: Transaction!
  # timestamp of transaction
  timestamp: BigInt!
  # pool swap occured within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # sender of the swap
  sender: Bytes!
  # recipient of the swap
  recipient: Bytes!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # delta of token0 swapped
  amount0: BigDecimal!
  # delta of token1 swapped
  amount1: BigDecimal!
  # derived info
  amountUSD: BigDecimal!
  # The sqrt(price) of the pool after the swap, as a Q64.96
  sqrtPriceX96: BigInt!
  # the tick after the swap
  tick: BigInt!
  # index within the txn
  logIndex: BigInt
}

type Collect @entity {
  # transaction hash + "#" + index in collect Transaction array
  id: ID!
  # pointer to txn
  transaction: Transaction!
  # timestamp of event
  timestamp: BigInt!
  # pool collect occured within
  pool: Pool!
  # owner of position collect was performed on
  owner: Bytes
  # amount of token0 collected
  amount0: BigDecimal!
  # amount of token1 collected
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
  # lower tick of position
  tickLower: BigInt!
  # uppper tick of position
  tickUpper: BigInt!
  # index within the txn
  logIndex: BigInt
}

type Flash @entity {
  # transaction hash + "-" + index in collect Transaction array
  id: ID!
  # pointer to txn
  transaction: Transaction!
  # timestamp of event
  timestamp: BigInt!
  # pool collect occured within
  pool: Pool!
  # sender of the flash
  sender: Bytes!
  # recipient of the flash
  recipient: Bytes!
  # amount of token0 flashed
  amount0: BigDecimal!
  # amount of token1 flashed
  amount1: BigDecimal!
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal!
  # amount token0 paid for flash
  amount0Paid: BigDecimal!
  # amount token1 paid for flash
  amount1Paid: BigDecimal!
  # index within the txn
  logIndex: BigInt
}

# Data accumulated and condensed into day stats for all of Uniswap
type UniswapDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # total daily volume in Uniswap derived in terms of ETH
  volumeETH: BigDecimal!
  # total daily volume in Uniswap derived in terms of USD
  volumeUSD: BigDecimal!
  # total daily volume in Uniswap derived in terms of USD untracked
  volumeUSDUntracked: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # number of daily transactions
  txCount: BigInt!
  # tvl in terms of USD
  tvlUSD: BigDecimal!
}

# Data accumulated and condensed into day stats for each pool
type PoolDayData @entity {
  # timestamp rounded to current day by dividing by 86400
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to pool
  pool: Pool!
  # in range liquidity at end of period
  liquidity: BigInt!
  # current price tracker at end of period
  sqrtPrice: BigInt!
  # price of token0 - derived from sqrtPrice
  token0Price: BigDecimal!
  # price of token1 - derived from sqrtPrice
  token1Price: BigDecimal!
  # current tick at end of period
  tick: BigInt
  # tvl derived in USD at end of period
  tvlUSD: BigDecimal!
  # volume in token0
  volumeToken0: BigDecimal!
  # volume in token1
  volumeToken1: BigDecimal!
  # volume in USD
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # numebr of transactions during period
  txCount: BigInt!
  # opening price of token0
  open: BigDecimal!
  # high price of token0
  high: BigDecimal!
  # low price of token0
  low: BigDecimal!
  # close price of token0
  close: BigDecimal!
}

# hourly stats tracker for pool
type PoolHourData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to pool
  pool: Pool!
  # in range liquidity at end of period
  liquidity: BigInt!
  # current price tracker at end of period
  sqrtPrice: BigInt!
  # price of token0 - derived from sqrtPrice
  token0Price: BigDecimal!
  # price of token1 - derived from sqrtPrice
  token1Price: BigDecimal!
  # current tick at end of period
  tick: BigInt
  # tvl derived in USD at end of period
  tvlUSD: BigDecimal!
  # volume in token0
  volumeToken0: BigDecimal!
  # volume in token1
  volumeToken1: BigDecimal!
  # volume in USD
  volumeUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # numebr of transactions during period
  txCount: BigInt!
  # opening price of token0
  open: BigDecimal!
  # high price of token0
  high: BigDecimal!
  # low price of token0
  low: BigDecimal!
  # close price of token0
  close: BigDecimal!
}

type TokenDayData @entity {
  # token address concatendated with date
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # price at end of period in USD
  priceUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # opening price USD
  open: BigDecimal!
  # high price USD
  high: BigDecimal!
  # low price USD
  low: BigDecimal!
  # close price USD
  close: BigDecimal!
}

type TokenHourData @entity {
  # token address concatendated with date
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # volume in USD even on pools with less reliable USD values
  untrackedVolumeUSD: BigDecimal!
  # liquidity across all pools in token units
  totalValueLocked: BigDecimal!
  # liquidity across all pools in derived USD
  totalValueLockedUSD: BigDecimal!
  # price at end of period in USD
  priceUSD: BigDecimal!
  # fees in USD
  feesUSD: BigDecimal!
  # opening price USD
  open: BigDecimal!
  # high price USD
  high: BigDecimal!
  # low price USD
  low: BigDecimal!
  # close price USD
  close: BigDecimal!
}
